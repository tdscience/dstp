---
title: "Deploying a Dockerized Routing Engine on GCP"
execute:
  eval: false
---

## Modern, Failsafe GCP Deployment Guide

This guide provides a minimal, quick, and robust method for deploying a Dockerized OpenTripPlanner (OTP) server on Google Cloud Platform (GCP), adhering to modern best practices.

**Core Principles:**
- **Declarative Deployment:** Use `create-with-container` for reliable, atomic deployments instead of fragile startup scripts.
- **Least Privilege Security:** Employ a dedicated Service Account with minimal permissions.
- **Optimized Images:** Use multi-stage Docker builds for smaller, more secure images.
- **Cost Efficiency:** Utilize Spot VMs for non-critical workloads.
- **Stable Networking:** Reserve a static IP address.

---

### Step 1: Prerequisites (Local Machine)

1.  **Install Google Cloud SDK:** This provides the `gcloud` command-line tool.
```bash
curl https://sdk.cloud.google.com | bash
exec -l $SHELL
gcloud init
```
*Follow the prompts to log in and select your GCP project (e.g., `shiny-server-154518`).*

2.  **Install Docker:** If not already installed.
```bash
sudo apt update && sudo apt install -y docker.io
sudo usermod -aG docker $USER
# Log out and back in for the group changes to take effect.
```

3.  **Enable GCP APIs:**
```bash
gcloud services enable compute.googleapis.com artifactregistry.googleapis.com iam.googleapis.com
```

4.  **Configure Docker to Authenticate with Artifact Registry:**
```bash
# Replace 'europe-west2' with your preferred GCP region, e.g. for london: europe-west2
gcloud auth configure-docker europe-west2-docker.pkg.dev
```

---

### Step 2: Build and Push the Optimized Docker Image

1.  **Create the `Dockerfile`:**
Save the following as `routing-engine/Dockerfile`. This multi-stage build creates a minimal final image.

```dockerfile
# ---- Build Stage ----
# Use a standard Ubuntu image as a 'builder' to get the OTP files
FROM ubuntu:22.04 as builder

# Install only the tools needed to download and unpack
RUN apt-get update && apt-get install -y wget unzip && rm -rf /var/lib/apt/lists/*

# Download and unpack OTP into a temporary location
WORKDIR /source
RUN wget https://github.com/ITSLeeds/TDS/releases/download/0.20.1/otp_TDS.zip && \
unzip otp_TDS.zip

# ---- Final Stage ----
# Start from a clean, official OpenJDK base image, which is minimal and secure
FROM eclipse-temurin:8-jre-focal

# Set the working directory
WORKDIR /app

# Copy the OTP application files from the 'builder' stage
COPY --from=builder /source/otp_TDS/ .

# Ensure the graphs directory exists, as OTP will look for it
RUN mkdir -p graphs

# Expose the port the application will run on
EXPOSE 8080

# Set the command to run the OTP server
CMD ["java", "-Xmx3g", "-jar", "otp-1.5.0-shaded.jar", "--router", "west-yorkshire", "--graphs", "/app/graphs", "--server", "--port", "8080"]
```

2.  **Create the Artifact Registry Repository:**
This is a one-time setup for your project.

```bash
gcloud artifacts repositories create routing-engine \
  --repository-format=docker \
  --location=europe-west2 \
  --project=shiny-server-154518
```

3.  **Build, Tag, and Push the Image:**
```bash
# Define your image URI
export IMAGE_URI="europe-west2-docker.pkg.dev/shiny-server-154518/routing-engine/routing-engine:latest"

# Build and push
docker build -t $IMAGE_URI ./routing-engine/
docker push $IMAGE_URI
```

Test the image locally (optional):

```bash
docker run -p 8080:8080 $IMAGE_URI
curl "http://localhost:8080/otp/routers/west-yorkshire/plan?fromPlace=53.8003,-1.5491&toPlace=53.8008,-1.5497&mode=CAR"
```

---

### Step 3: Deploy the Container to a GCP VM

1.  **Create a Dedicated Service Account (One-time setup):**

This ensures the VM has only the permissions it needs.
```bash
gcloud iam service-accounts create otp-vm-sa \
  --display-name="OTP VM Service Account" \
  --project=shiny-server-154518

gcloud projects add-iam-policy-binding shiny-server-154518 \
  --member="serviceAccount:otp-vm-sa@shiny-server-154518.iam.gserviceaccount.com" \
  --role="roles/artifactregistry.reader"
```

2.  **Deploy the VM and Container:**
This single command creates the VM and deploys your container declaratively.
```bash
gcloud compute instances create-with-container routing-vm \
  --zone=europe-west2-a \
  --machine-type=e2-medium \
  --provisioning-model=SPOT \
  --service-account=otp-vm-sa@shiny-server-154518.iam.gserviceaccount.com \
  --tags=allow-http-traffic \
  --container-image=$IMAGE_URI \
  --container-restart-policy=always
```

3.  **Create a Firewall Rule:**
```bash
gcloud compute firewall-rules create allow-http \
  --allow tcp:80 \
  --source-ranges=0.0.0.0/0 \
  --target-tags=allow-http-traffic
```
*Note: The `create-with-container` command maps the container's port (8080) to the VM's port 80 by default.*

---

### Step 4: Access and Manage Your Server

1.  **Get the External IP Address:**
```bash
export EXTERNAL_IP=$(gcloud compute instances describe routing-vm --zone=europe-west2-a --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
echo "Server IP: $EXTERNAL_IP"
```

2.  **Test the API:**
Wait a minute for the VM to boot and the container to start, then run:
```bash
curl "http://$EXTERNAL_IP/otp/routers/west-yorkshire/plan?fromPlace=53.8003,-1.5491&toPlace=53.8008,-1.5497&mode=CAR"
```

3.  **View Logs:**
The logs are automatically streamed to Google Cloud's operations suite (formerly Stackdriver).
```bash
gcloud logging read "resource.type=gce_instance AND resource.labels.instance_id=$(gcloud compute instances describe routing-vm --zone=europe-west2-a --format='get(id)')" --limit 100
```

---

### Step 5: Cleanup

To avoid ongoing charges, delete the resources when you are finished.

```bash
gcloud compute instances delete routing-vm --zone=europe-west2-a --quiet
gcloud compute firewall-rules delete allow-http --quiet
gcloud iam service-accounts delete otp-vm-sa@shiny-server-154518.iam.gserviceaccount.com --quiet
# Optional: delete the Artifact Registry repository and image
gcloud artifacts repositories delete routing-engine --location=europe-west2 --quiet
```